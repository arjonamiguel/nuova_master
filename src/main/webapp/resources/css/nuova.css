.table{
    border: 1px solid #ccc;
    padding: 5px;
    margin: 5 5 5 5;
    box-shadow: 3px 3px 2px #ccc;
    transition: 0.5s;
    background-color:white;
    width:100%;
}
.table:hover{
    box-shadow: 3px 3px 0px transparent;
    transition: 0.5s;
}
.mainContainer {
	  position: relative; /* or absolute */
	  top: 5%;
	  left: 0%;
	  right: 2%;
	  bottom:2%;
	  float:left;
	  width:98%;
	  margin-left:1%;
	  margin-right:1%;
	  margin-top:1%;
	  margin-bottom:1%;
	  background-color:#f5f5f5;
	  border-radius: 10px;
}
.tableHeader{
	background-color:#f9f9f9;
}
.rowContainerProf{
			float:left;
			width:50%;
			height:10%;
			padding-left:0px;
}

.labelProf{
		float:left;
		padding-right:2%;
		padding-left:5%;
		}
.inputProf{
		float:right;
		padding-top:0%;
}

.btn-info {
    color: #fff;
    background-color: #5bc0de;
    border-color: #46b8da;
}
/* Hiding the checkbox, but allowing it to be focused */
.badgebox
{
    opacity: 0;
}

.badgebox + .badge
{
    /* Move the check mark away when unchecked */
    text-indent: -999999px;
    /* Makes the badge's width stay the same checked and unchecked */
	width: 27px;
}

.badgebox:focus + .badge
{
    /* Set something to make the badge looks focused */
    /* This really depends on the application, in my case it was: */
    
    /* Adding a light border */
    box-shadow: inset 0px 0px 5px;
    /* Taking the difference out of the padding */
}

.badgebox:checked + .badge
{
    /* Move the check mark back when checked */
	text-indent: 0;
}
.label, .badge{
	background-color:#E0F8F7;
	color:black;
}
.badge{
	box-shadow: inset 0px 0px 5px;
}

.navbar{
	margin-bottom:0px;
}
.navbar-inner{
	padding-left:1%;
	margin-bottom:0px;
	margin-top:0px;
}
.navbar-inverse{
	margin-bottom:0px;
	
}
.textTitle{
	padding-left:1%;
}
.formLabel{
	float:left;
}
.formInput{
	padding-left:30%;
}
.labelDate{
	padding-top:1%;
	float:left;
	visibility:hidden;
	padding-right:4%;
}
.siprosaDiv{
	width:40%;
	padding-top:1%;
	padding-left:1%;
	pointer-events:none;
}
/* Hiding the checkbox, but allowing it to be focused */
.badgebox
{
    opacity: 0;
}

.badgebox + .badge
{
    /* Move the check mark away when unchecked */
    text-indent: -999999px;
    /* Makes the badge's width stay the same checked and unchecked */
	width: 27px;
}

.badgebox:focus + .badge
{
    /* Set something to make the badge looks focused */
    /* This really depends on the application, in my case it was: */
    
    /* Adding a light border */
    box-shadow: inset 0px 0px 5px;
    /* Taking the difference out of the padding */
}

.badgebox:checked + .badge
{
    /* Move the check mark back when checked */
	text-indent: 0;
}
.label, .badge{
	background-color:#E0F8F7;
	color:black;
}
.badge{
	box-shadow: inset 0px 0px 5px;
}
.pageTitle{
	padding-left:0%;
}
.tableContainer{
	padding-left:1%;
	padding-right:1%;
}
.addButton{
	float:right;
	padding-right:0	%;
}
-bodyStyle{
	background-color:#eee;
}
.panelContainer{
	padding-left:2%;
	padding-right:0%;
	padding-top:2%;
}
.navbar-inner{
	border-radius:0px;
}
.pagenumber{
	height:15px;	
}

.material-switch > input[type="checkbox"] {
    display: none;   
}

.material-switch > label {
    cursor: pointer;
    height: 0px;
    position: relative; 
    width: 40px;  
}

.material-switch > label::before {
    background: red;
    box-shadow: inset 0px 0px 10px rgba(0, 0, 0, 0.5);
    border-radius: 8px;
    content: '';
    height: 16px;
    margin-top: -8px;
    position:absolute;
    opacity: 0.3;
    transition: all 0.4s ease-in-out;
    width: 40px;
}
.material-switch > label::after {
    background: rgb(255, 255, 255);
    border-radius: 16px;
    box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.3);
    content: '';
    height: 24px;
    left: -4px;
    margin-top: -8px;
    position: absolute;
    top: -4px;
    transition: all 0.3s ease-in-out;
    width: 24px;
}
.material-switch > input[type="checkbox"]:checked + label::before {
    background: inherit;
    opacity: 0.5;
}
.material-switch > input[type="checkbox"]:checked + label::after {
    background: inherit;
    left: 20px;
}